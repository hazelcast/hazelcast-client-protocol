/*
 * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hazelcast.client.protocol.compatibility;

import com.hazelcast.client.HazelcastClientUtil;
import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.ClientMessageReader;
import com.hazelcast.client.impl.protocol.codec.*;
import com.hazelcast.test.HazelcastParallelClassRunner;
import com.hazelcast.test.annotation.ParallelJVMTest;
import com.hazelcast.test.annotation.QuickTest;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static com.hazelcast.client.impl.protocol.ClientMessage.IS_FINAL_FLAG;
import static com.hazelcast.client.protocol.compatibility.ReferenceObjects.*;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

@RunWith(HazelcastParallelClassRunner.class)
@Category({QuickTest.class, ParallelJVMTest.class})
public class ClientCompatibility{% if test_nullable %}Null{% endif %}Test_{{ '_'.join(protocol_version.split('.')) }} {
    private List<ClientMessage> clientMessages = new ArrayList<>();

    @Before
    public void setUp() throws IOException {
        File file = new File(getClass().getResource("/{{ protocol_version }}.protocol.compatibility{% if test_nullable %}.null{% endif %}.binary").getFile());
        InputStream inputStream = new FileInputStream(file);
        byte[] data = new byte[(int) file.length()];
        inputStream.read(data);
        ByteBuffer buffer = ByteBuffer.wrap(data);
        ClientMessageReader reader = new ClientMessageReader(0);
        while (reader.readFrom(buffer, true)) {
            clientMessages.add(reader.getClientMessage());
            reader.reset();
        }
    }
    {% set protocol_version_as_number = get_version_as_number(protocol_version) %}
    {% set counter = namespace(count=0) %}
    {% for service in services %}
    {% for method in service.methods %}
        {% if get_version_as_number(method.since) >  protocol_version_as_number %}
            {% continue %}
        {% endif %}

    @Test
    public void test_{{ service.name|capital}}{{ method.name|capital }}Codec_encodeRequest() {
        int fileClientMessageIndex = {{ counter.count }};
        ClientMessage encoded = {{ service.name|capital }}{{ method.name|capital }}Codec.encodeRequest({% for param in method.request.params %}{%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %});
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        compareClientMessages(fromFile, encoded);
    }
    {% set counter.count = counter.count + 1 %}

    @Test
    public void test_{{ service.name|capital }}{{ method.name|capital }}Codec_decodeResponse() {
        int fileClientMessageIndex = {{ counter.count }};
        {% set noResponseValue = method.response.params|length == 0 and response_new_params|length == 0 %}
        {% set singleResponseValue = method.response.params|length == 1 and response_new_params|length == 0 %}
        {% if noResponseValue %}
        {% elif singleResponseValue %}
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        {% set param = method.response.params|last %}
        assertTrue(isEqual({%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}, {{ service.name|capital }}{{ method.name|capital }}Codec.decodeResponse(fromFile)));
        {% else %}
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        {{ service.name|capital }}{{ method.name|capital }}Codec.ResponseParameters parameters = {{ service.name|capital }}{{ method.name|capital }}Codec.decodeResponse(fromFile);
        {% set new_response_params = new_params(method.since, method.response.params) %}
        {% for param in method.response.params %}
            {% if get_version_as_number(param.since) > protocol_version_as_number %}
        assertFalse(parameters.is{{ param.name|capital }}Exists);
            {% else %}
                {% if param in new_response_params %}
        assertTrue(parameters.is{{ param.name|capital }}Exists);
                {% endif %}
        assertTrue(isEqual({%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}, parameters.{{ param.name }}));
            {% endif %}
        {% endfor %}
        {% endif %}
    }
    {% set counter.count = counter.count + 1 %}
    {% if method.events|length != 0%}

    private static class {{ service.name|capital }}{{ method.name|capital }}CodecHandler extends {{ service.name|capital }}{{ method.name|capital }}Codec.AbstractEventHandler {
        {% for event in method.events %}
            {% set new_event_params = new_params(event.since, event.params) %}
            {% set event_version = get_version_as_number(event.since) %}
        @Override
        public void handle{{ event.name|capital }}Event({% for param in event.params %}{% if param in new_event_params %}boolean is{{ param.name|capital }}Exists, {% endif %}{{ lang_types_encode(param.type) }} {{param.name}}{% if not loop.last %}, {% endif %}{% endfor %}) {
                {% if event_version > protocol_version_as_number %}
            fail("This method should not be called since this is an v{{ event.since }} event handler but the test is for v{{ protocol_version }}");
                {% else %}
                    {% for param in event.params %}
                        {% if param in new_event_params %}
                            {% if get_version_as_number(param.since) > protocol_version_as_number %}
            assertFalse(is{{ param.name|capital }}Exists);
                            {% else %}
            assertTrue(is{{ param.name|capital }}Exists);
            assertTrue(isEqual({%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}, {{ param.name }}));
                            {% endif %}
                        {% else %}
            assertTrue(isEqual({%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}, {{ param.name }}));
                        {% endif %}
                    {% endfor %}
                {% endif %}
        }
        {% endfor %}
    }
    {% for event in method.events %}
        {% if get_version_as_number(event.since) > protocol_version_as_number %}
            {% continue %}
        {% endif %}

    @Test
    public void test_{{ service.name|capital }}{{ method.name|capital }}Codec_handle{{ event.name|capital }}Event() {
        int fileClientMessageIndex = {{ counter.count }};
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        {{ service.name|capital }}{{ method.name|capital }}CodecHandler handler = new {{ service.name|capital }}{{ method.name|capital }}CodecHandler();
        handler.handle(fromFile);
    }
    {% set counter.count = counter.count + 1 %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    {% endfor %}

    private void compareClientMessages(ClientMessage binaryMessage, ClientMessage encodedMessage) {
        ClientMessage.Frame binaryFrame, encodedFrame;

        ClientMessage.ForwardFrameIterator binaryFrameIterator = binaryMessage.frameIterator();
        ClientMessage.ForwardFrameIterator encodedFrameIterator = encodedMessage.frameIterator();
        assertTrue("Client message that is read from the binary file does not have any frames", binaryFrameIterator.hasNext());

        while (binaryFrameIterator.hasNext()) {
            binaryFrame = binaryFrameIterator.next();
            encodedFrame = encodedFrameIterator.next();
            assertNotNull("Encoded client message has less frames.", encodedFrame);

            if (binaryFrame.isEndFrame() && !encodedFrame.isEndFrame()) {
                if (encodedFrame.isBeginFrame()) {
                    HazelcastClientUtil.fastForwardToEndFrame(encodedFrameIterator);
                }
                encodedFrame = HazelcastClientUtil.fastForwardToEndFrame(encodedFrameIterator);
            }

            boolean isFinal = binaryFrameIterator.peekNext() == null;
            int flags = isFinal ? encodedFrame.flags | IS_FINAL_FLAG : encodedFrame.flags;
            assertArrayEquals("Frames have different contents", binaryFrame.content, Arrays.copyOf(encodedFrame.content, binaryFrame.content.length));
            assertEquals("Frames have different flags", binaryFrame.flags, flags);
        }
    }
}

