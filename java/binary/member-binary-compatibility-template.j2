/*
 * Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.hazelcast.client.protocol.compatibility;

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.ClientMessageReader;
import com.hazelcast.client.impl.protocol.codec.*;
import com.hazelcast.test.HazelcastParallelClassRunner;
import com.hazelcast.test.annotation.ParallelJVMTest;
import com.hazelcast.test.annotation.QuickTest;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static com.hazelcast.client.impl.protocol.ClientMessage.IS_FINAL_FLAG;
import static com.hazelcast.client.protocol.compatibility.ReferenceObjects.*;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

@RunWith(HazelcastParallelClassRunner.class)
@Category({QuickTest.class, ParallelJVMTest.class})
public class MemberCompatibility{% if test_nullable %}Null{% endif %}Test_{{ '_'.join(protocol_version.split('.')) }} {
    private List<ClientMessage> clientMessages = new ArrayList<>();

    @Before
    public void setUp() throws IOException {
        File file = new File(getClass().getResource("/{{ protocol_version }}.protocol.compatibility{% if test_nullable %}.null{% endif %}.binary").getFile());
        InputStream inputStream = new FileInputStream(file);
        byte[] data = new byte[(int) file.length()];
        inputStream.read(data);
        ByteBuffer buffer = ByteBuffer.wrap(data);
        ClientMessageReader reader = new ClientMessageReader();
        while (reader.readFrom(buffer)) {
            clientMessages.add(ClientMessage.createForDecode(reader.getFrames()));
            reader.reset();
        }
    }
    {% set counter = namespace(count=0) %}
    {% for service in services %}
    {% for method in service.methods %}

    @Test
    public void test_{{ service.name|capital}}{{ method.name|capital }}Codec_decodeRequest() {
        int fileClientMessageIndex = {{ counter.count }};
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        {{ service.name|capital }}{{ method.name|capital }}Codec.RequestParameters parameters = {{ service.name|capital }}{{ method.name|capital }}Codec.decodeRequest(fromFile);
        {% for param in method.request.params %}
        assertTrue(isEqual({%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}, parameters.{{ param.name }}));
        {% endfor %}
    }
    {% set counter.count = counter.count + 1 %}

    @Test
    public void test_{{ service.name|capital }}{{ method.name|capital }}Codec_encodeResponse() {
        int fileClientMessageIndex = {{ counter.count }};
        ClientMessage encoded = {{ service.name|capital }}{{ method.name|capital }}Codec.encodeResponse({% for param in method.response.params %}{%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %});
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        compareClientMessages(fromFile, encoded);
    }
    {% set counter.count = counter.count + 1 %}
    {% if method.events|length != 0%}
    {% for event in method.events %}

    @Test
    public void test_{{ service.name|capital }}{{ method.name|capital }}Codec_encode{{ event.name|capital }}Event() {
        int fileClientMessageIndex = {{ counter.count }};
        ClientMessage fromFile = clientMessages.get(fileClientMessageIndex);
        ClientMessage encoded = {{ service.name|capital }}{{ method.name|capital }}Codec.encode{{ event.name|capital }}Event({% for param in event.params %}{%if test_nullable and param.nullable %}null{% else %}{{ reference_objects_dict[param.type] }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %});
        compareClientMessages(fromFile, encoded);
    }
    {% set counter.count = counter.count + 1 %}
    {% endfor %}
    {% endif %}
    {% endfor %}
    {% endfor %}

    private void compareClientMessages(ClientMessage fromFile, ClientMessage encoded) {
        assertTrue("Encoded client messages have less frames", fromFile.size() <= encoded.size());
        ClientMessage.Frame f1, f2;
        int n = fromFile.size();
        for (int i = 0; i < n; i++) {
            f1 = fromFile.get(i);
            f2 = encoded.get(i);
            boolean isFinal = i == (n - 1);
            if (i == 0) {
                compareInitialFrame(f1, f2, isFinal);
            } else {
                assertArrayEquals("Frames have different contents", f1.content, f2.content);
                int flags = isFinal ? f2.flags | IS_FINAL_FLAG : f2.flags;
                assertEquals("Frames have different flags", f1.flags, flags);
            }
        }
    }

    private void compareInitialFrame(ClientMessage.Frame fromFile, ClientMessage.Frame encoded, boolean isFinal) {
        assertTrue("Encoded client message have shorter initial frame",
                fromFile.content.length <= encoded.content.length);
        assertArrayEquals("Initial frames have different contents",
                fromFile.content, Arrays.copyOf(encoded.content, fromFile.content.length));
        int flags = isFinal ? encoded.flags | IS_FINAL_FLAG : encoded.flags;
        assertEquals("Initial frames have different flags", fromFile.flags, flags);
    }
}
