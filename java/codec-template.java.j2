{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ item_type(lang_name, param.type) }}Codec::encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ key_type(lang_name, param.type) }}Codec::encode, {{ value_type(lang_name, param.type) }}Codec::encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ key_type(lang_name, param.type) }}Codec::encode, {{ value_type(lang_name, param.type) }}Codec::encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.encodeNullable(clientMessage, {{ param.name }}, {{ lang_name(param.type) }}Codec::encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.encode(clientMessage, {{ param.name }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(iterator, {{ item_type(lang_name, param.type) }}Codec::decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec::decode, {{ value_type(lang_name, param.type) }}Codec::decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec::decode, {{ value_type(lang_name, param.type) }}Codec::decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.decodeNullable(iterator, {{ lang_name(param.type) }}Codec::decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
{% set request_fix_sized_params = fixed_params(method.request.params) %}
{% set request_var_sized_params = var_size_params(method.request.params) %}
{% set request_new_params = new_params(method.since, method.request.params) %}
{% set response_fix_sized_params = fixed_params(method.response.params) %}
{% set response_var_sized_params = var_size_params(method.response.params) %}
{% set response_new_params = new_params(method.since, method.response.params) %}
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{% if namespace %}
package {{ namespace }};
{% else %}
package com.hazelcast.client.impl.protocol.codec;
{% endif %}

import com.hazelcast.client.impl.protocol.ClientMessage;
import com.hazelcast.client.impl.protocol.Generated;
import com.hazelcast.client.impl.protocol.codec.builtin.*;
import com.hazelcast.client.impl.protocol.codec.custom.*;
{% if method.events|length != 0 %}
import com.hazelcast.logging.Logger;
{% endif %}

import javax.annotation.Nullable;

import static com.hazelcast.client.impl.protocol.ClientMessage.*;
import static com.hazelcast.client.impl.protocol.codec.builtin.FixedSizeTypesCodec.*;

/*
 * This file is auto-generated by the Hazelcast Client Protocol Code Generator.
 * To change this file, edit the templates or the protocol
 * definitions on the https://github.com/hazelcast/hazelcast-client-protocol
 * and regenerate it.
 */

/**
{% for line in method.doc.splitlines() %}
 * {{ line }}
{% endfor %}
 */
@Generated("!codec_hash!")
public final class {{ service_name|capital }}{{ method.name|capital }}Codec {
    //hex: {{ '0x%06X'|format(method.request.id) }}
    public static final int REQUEST_MESSAGE_TYPE = {{ method.request.id }};
    //hex: {{ '0x%06X'|format(method.response.id) }}
    public static final int RESPONSE_MESSAGE_TYPE = {{ method.response.id }};
{#FIXED SIZED PARAMETER OFFSET CONSTANTS#}
{% for param in request_fix_sized_params %}
    private static final int REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET = {% if loop.first %}PARTITION_ID_FIELD_OFFSET + INT_SIZE_IN_BYTES{% else %}REQUEST_{{ to_upper_snake_case(loop.previtem.name)}}_FIELD_OFFSET + {{ loop.previtem.type.upper() }}_SIZE_IN_BYTES{% endif %};
    {% if loop.last %}
    private static final int REQUEST_INITIAL_FRAME_SIZE = REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES;
    {% endif %}
{% else %}
    private static final int REQUEST_INITIAL_FRAME_SIZE = PARTITION_ID_FIELD_OFFSET + INT_SIZE_IN_BYTES;
{% endfor %}
{% for param in response_fix_sized_params %}
    private static final int RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET = {% if loop.first %}RESPONSE_BACKUP_ACKS_FIELD_OFFSET + BYTE_SIZE_IN_BYTES{% else %}RESPONSE_{{ to_upper_snake_case(loop.previtem.name)}}_FIELD_OFFSET + {{ loop.previtem.type.upper() }}_SIZE_IN_BYTES{% endif %};
    {% if loop.last %}
    private static final int RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES;
    {% endif %}
{% else %}
    private static final int RESPONSE_INITIAL_FRAME_SIZE = RESPONSE_BACKUP_ACKS_FIELD_OFFSET + BYTE_SIZE_IN_BYTES;
{% endfor %}
{% for event in method.events%}
    {% for param in fixed_params(event.params) %}
    private static final int EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET = {% if loop.first %}PARTITION_ID_FIELD_OFFSET + INT_SIZE_IN_BYTES{% else %}EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(loop.previtem.name)}}_FIELD_OFFSET + {{ loop.previtem.type.upper() }}_SIZE_IN_BYTES{% endif %};
    {% if loop.last %}
    private static final int EVENT_{{ to_upper_snake_case(event.name)}}_INITIAL_FRAME_SIZE = EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES;
    {% endif %}
    {% else %}
    private static final int EVENT_{{ to_upper_snake_case(event.name)}}_INITIAL_FRAME_SIZE = PARTITION_ID_FIELD_OFFSET + INT_SIZE_IN_BYTES;
    {% endfor %}
    //hex: {{ '0x%06X'|format(event.id) }}
    private static final int EVENT_{{ to_upper_snake_case(event.name)}}_MESSAGE_TYPE = {{ event.id }};
{% endfor %}

    private {{ service_name|capital }}{{ method.name|capital }}Codec() {
    }
{#REQUEST PARAMETERS#}
{% set noRequestValue = method.request.params|length == 0 %}
{% set singleRequestValue = method.request.params|length == 1 and request_new_params|length == 0 %}
{% if not (noRequestValue or singleRequestValue) %}

    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
    public static class RequestParameters {
    {% for param in method.request.params %}

        /**
        {% for line in param.doc.splitlines() %}
         * {{ line }}
        {% endfor %}
         */
        public {% if param.nullable  %}@Nullable {% endif %}{{ lang_types_decode(param.type) }} {{ param.name }};
    {% endfor %}
    {% for param in request_new_params %}

        /**
         * True if the {{ param.name }} is received from the client, false otherwise.
         * If this is false, {{ param.name }} has the default value for its type.
         */
        public boolean is{{ param.name|capital }}Exists;
    {% endfor %}
    }
{% endif %}

{#REQUEST_ENCODE#}
    public static ClientMessage encodeRequest({% for param in method.request.params %}{% if param.nullable  %}@Nullable {% endif %}{{ lang_types_encode(param.type) }} {{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        ClientMessage clientMessage = ClientMessage.createForEncode();
        clientMessage.setRetryable({{ method.request.retryable|lower }});
        clientMessage.setOperationName("{{ service_name|capital }}.{{ method.name|capital }}");
        ClientMessage.Frame initialFrame = new ClientMessage.Frame(new byte[REQUEST_INITIAL_FRAME_SIZE], UNFRAGMENTED_MESSAGE);
        encodeInt(initialFrame.content, TYPE_FIELD_OFFSET, REQUEST_MESSAGE_TYPE);
        encodeInt(initialFrame.content, PARTITION_ID_FIELD_OFFSET, -1);
    {% for param in request_fix_sized_params %}
        encode{{ param.type|capital }}(initialFrame.content, REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET, {{ param.name }});
    {% endfor %}
        clientMessage.add(initialFrame);
    {% for param in request_var_sized_params %}
        {{ encode_var_sized(param) }};
    {% endfor %}
        return clientMessage;
    }

{#REQUEST_DECODE#}
{% if noRequestValue %}
{% elif singleRequestValue %}
    {% set param = method.request.params|last %}
    /**
    {% for line in param.doc.splitlines() %}
     * {{ line }}
    {% endfor %}
     */
    public static {{ lang_types_decode(param.type) }} decodeRequest(ClientMessage clientMessage) {
        ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();
        {% if request_fix_sized_params|length != 0 %}
        ClientMessage.Frame initialFrame = iterator.next();
        {% else %}
        //empty initial frame
        iterator.next();
        {% endif %}
        {% for param in request_fix_sized_params %}
        return decode{{ param.type|capital }}(initialFrame.content, REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
        {% endfor %}
        {% for param in request_var_sized_params %}
        return {{ decode_var_sized(param) }};
        {% endfor %}
    }
{% else %}
    public static {{ service_name|capital }}{{ method.name|capital }}Codec.RequestParameters decodeRequest(ClientMessage clientMessage) {
        ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();
        RequestParameters request = new RequestParameters();
    {% if request_fix_sized_params|length != 0 %}
        ClientMessage.Frame initialFrame = iterator.next();
    {% else %}
        //empty initial frame
        iterator.next();
    {% endif %}
    {% for param in request_fix_sized_params %}
        {% if param in request_new_params %}
        if (initialFrame.content.length >= REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES) {
            request.{{ param.name }} = decode{{ param.type|capital }}(initialFrame.content, REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
            request.is{{ param.name|capital }}Exists = true;
        } else {
            request.is{{ param.name|capital }}Exists = false;
        }
        {% else %}
        request.{{ param.name }} = decode{{ param.type|capital }}(initialFrame.content, REQUEST_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
        {% endif %}
    {% endfor %}
    {% for param in request_var_sized_params %}
        {% if param in request_new_params %}
        if (iterator.hasNext()) {
            request.{{ param.name }} = {{ decode_var_sized(param) }};
            request.is{{ param.name|capital }}Exists = true;
        } else {
            request.is{{ param.name|capital }}Exists = false;
        }
        {% else %}
        request.{{ param.name }} = {{ decode_var_sized(param) }};
        {% endif %}
    {% endfor %}
        return request;
    }
{% endif %}

{#RESPONSE PARAMETERS#}
{% set noResponseValue = method.response.params|length == 0 %}
{% set singleResponseValue = method.response.params|length == 1 and response_new_params|length == 0 %}
{% if not (noResponseValue or singleResponseValue) %}
    @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"URF_UNREAD_PUBLIC_OR_PROTECTED_FIELD"})
    public static class ResponseParameters {
    {% for param in method.response.params %}

        /**
        {% for line in param.doc.splitlines() %}
         * {{ line }}
        {% endfor %}
         */
        public {% if param.nullable  %}@Nullable {% endif %}{{ lang_types_decode(param.type) }} {{ param.name }};
    {% endfor %}
    {% for param in response_new_params %}

        /**
         * True if the {{ param.name }} is received from the member, false otherwise.
         * If this is false, {{ param.name }} has the default value for its type.
         */
        public boolean is{{ param.name|capital }}Exists;
    {% endfor %}
    }
{% endif %}
{#RESPONSE ENCODE#}
    public static ClientMessage encodeResponse({% for param in method.response.params %}{% if param.nullable  %}@Nullable {% endif %}{{ lang_types_encode(param.type) }} {{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        ClientMessage clientMessage = ClientMessage.createForEncode();
        ClientMessage.Frame initialFrame = new ClientMessage.Frame(new byte[RESPONSE_INITIAL_FRAME_SIZE], UNFRAGMENTED_MESSAGE);
        encodeInt(initialFrame.content, TYPE_FIELD_OFFSET, RESPONSE_MESSAGE_TYPE);
    {% for param in response_fix_sized_params %}
        encode{{ param.type|capital }}(initialFrame.content, RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET, {{ param.name }});
    {% endfor %}
        clientMessage.add(initialFrame);

    {% for param in response_var_sized_params %}
        {{ encode_var_sized(param) }};
    {% endfor %}
        return clientMessage;
    }

{#RESPONSE DECODE#}
{% if noResponseValue %}
{% elif singleResponseValue %}
    {% set param = method.response.params|last %}
    /**
    {% for line in param.doc.splitlines() %}
     * {{ line }}
    {% endfor %}
     */
    public static {{ lang_types_decode(param.type) }} decodeResponse(ClientMessage clientMessage) {
        ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();
        {% if response_fix_sized_params|length != 0 %}
        ClientMessage.Frame initialFrame = iterator.next();
        {% else %}
        //empty initial frame
        iterator.next();
        {% endif %}
        {% for param in response_fix_sized_params %}
        return decode{{ param.type|capital }}(initialFrame.content, RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
        {% endfor %}
        {% for param in response_var_sized_params %}
        return {{ decode_var_sized(param) }};
        {% endfor %}
    }
{% else %}
    public static {{ service_name|capital }}{{ method.name|capital }}Codec.ResponseParameters decodeResponse(ClientMessage clientMessage) {
        ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();
        ResponseParameters response = new ResponseParameters();
        {% if response_fix_sized_params|length != 0 %}
        ClientMessage.Frame initialFrame = iterator.next();
        {% else %}
        //empty initial frame
        iterator.next();
        {% endif %}
    {% for param in response_fix_sized_params %}
        {% if param in response_new_params %}
        if (initialFrame.content.length >= RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES) {
            response.{{ param.name }} = decode{{ param.type|capital }}(initialFrame.content, RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
            response.is{{ param.name|capital }}Exists = true;
        } else {
            response.is{{ param.name|capital }}Exists = false;
        }
        {% else %}
        response.{{ param.name }} = decode{{ param.type|capital }}(initialFrame.content, RESPONSE_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
        {% endif %}
    {% endfor %}
    {% for param in response_var_sized_params %}
        {% if param in response_new_params %}
        if (iterator.hasNext()) {
            response.{{ param.name }} = {{ decode_var_sized(param) }};
            response.is{{ param.name|capital }}Exists = true;
        } else {
            response.is{{ param.name|capital }}Exists = false;
        }
        {% else %}
        response.{{ param.name }} = {{ decode_var_sized(param) }};
        {% endif %}
    {% endfor %}
        return response;
    }
{% endif %}

{# EVENTS#}
{% if method.events|length != 0 %}
{% for event in method.events%}
    public static ClientMessage encode{{ event.name|capital }}Event({% for param in event.params %}{% if param.nullable  %}@Nullable {% endif %}{{ lang_types_encode(param.type) }} {{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %}) {
        ClientMessage clientMessage = ClientMessage.createForEncode();
        ClientMessage.Frame initialFrame = new ClientMessage.Frame(new byte[EVENT_{{ to_upper_snake_case(event.name)}}_INITIAL_FRAME_SIZE], UNFRAGMENTED_MESSAGE);
        initialFrame.flags |= ClientMessage.IS_EVENT_FLAG;
        encodeInt(initialFrame.content, TYPE_FIELD_OFFSET, EVENT_{{ to_upper_snake_case(event.name)}}_MESSAGE_TYPE);
        encodeInt(initialFrame.content, PARTITION_ID_FIELD_OFFSET, -1);
    {% for param in fixed_params(event.params) %}
        encode{{ param.type|capital }}(initialFrame.content, EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET, {{ param.name }});
    {% endfor %}
        clientMessage.add(initialFrame);

    {% for param in var_size_params(event.params) %}
        {{ encode_var_sized(param) }};
    {% endfor %}
        return clientMessage;
    }
{% endfor %}

    public abstract static class AbstractEventHandler {

        public void handle(ClientMessage clientMessage) {
            int messageType = clientMessage.getMessageType();
            ClientMessage.ForwardFrameIterator iterator = clientMessage.frameIterator();
        {% for event in method.events%}
            if (messageType == EVENT_{{ to_upper_snake_case(event.name)}}_MESSAGE_TYPE) {
            {% set new_event_params = new_params(event.since, event.params) %}
            {% if fixed_params(event.params)|length != 0 %}
                ClientMessage.Frame initialFrame = iterator.next();
            {% else %}
                //empty initial frame
                iterator.next();
            {% endif %}
            {% for param in fixed_params(event.params) %}
                {% if param in new_event_params %}
                boolean is{{ param.name|capital }}Exists = false;
                {{ lang_types_encode(param.type) }} {{ param.name }} = {% if param.type == 'boolean' %}false{% elif param.type == 'UUID' %}null{% else %}0{% endif %};
                if (initialFrame.content.length >= EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES) {
                    {{ param.name }} = decode{{ param.type|capital }}(initialFrame.content, EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
                    is{{ param.name|capital }}Exists = true;
                }
                {% else %}
                {{ lang_types_encode(param.type) }} {{ param.name }} = decode{{ param.type|capital }}(initialFrame.content, EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_FIELD_OFFSET);
                {% endif %}
            {% endfor %}
            {% for param in var_size_params(event.params) %}
                {% if param in new_event_params %}
                boolean is{{ param.name|capital }}Exists = false;
                {{ lang_types_encode(param.type) }} {{ param.name }} = null;
                if (iterator.hasNext()) {
                    {{ param.name }} = {{ decode_var_sized(param) }};
                    is{{ param.name|capital }}Exists = true;
                }
                {% else %}
                {{ lang_types_encode(param.type) }} {{ param.name }} = {{ decode_var_sized(param) }};
                {% endif %}
            {% endfor %}
                handle{{ event.name|capital }}Event({% for param in event.params %}{% if param in new_event_params %}is{{ param.name|capital }}Exists, {% endif %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
                return;
            }
        {% endfor %}
            Logger.getLogger(super.getClass()).finest("Unknown message type received on event handler :" + messageType);
        }
    {% for event in method.events%}
        {% set new_event_params = new_params(event.since, event.params) %}

        /**
            {% for param in event.params %}
                {% if param in new_event_params %}
         * @param is{{ param.name|capital }}Exists True if {{ param.name }} exists, false otherwise.
                {% endif %}
         * @param {{ param.name }}
                {%- for line in param.doc.splitlines() %}
                    {% if loop.first -%}
        {{ " %s"|format(line) }}
                    {% else %}
         * {{ line|indent(8 + param.name|length, True) }}
                    {% endif %}
                {% endfor %}
            {% endfor %}
         */
        public abstract void handle{{ event.name|capital }}Event({% for param in event.params %}{% if param.nullable  %}@Nullable {% endif %}{% if param in new_event_params %}boolean is{{ param.name|capital }}Exists, {% endif %}{{ lang_types_encode(param.type) }} {{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
    {% endfor %}
    }
{% endif %}
}

