{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{{ param.name }}, {{ item_type(lang_name, param.type) }}Codec.encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{{ param.name }}, {{ key_type(lang_name, param.type) }}Codec.encode, {{ value_type(lang_name, param.type) }}Codec.encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{{ param.name }}, {{ key_type(lang_name, param.type) }}Codec.encode, {{ value_type(lang_name, param.type) }}Codec.encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.encodeNullable(clientMessage, {{ param_name(codec.name)}}.{{ param.name }}, {{ lang_name(param.type) }}Codec.encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.encode(clientMessage, {{ param_name(codec.name)}}.{{ param.name }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ item_type(lang_name, param.type) }}Codec.decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.decode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ key_type(lang_name, param.type) }}Codec.decode, {{ value_type(lang_name, param.type) }}Codec.decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.decode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ key_type(lang_name, param.type) }}Codec.decode, {{ value_type(lang_name, param.type) }}Codec.decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.decodeNullable(clientMessage, {{ lang_name(param.type) }}Codec.decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.decode(clientMessage)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
{% macro get_import_statements() -%}
    {% set imported_paths = [] %}
    {%- for params in varargs -%}
        {% for param in params %}
            {% set path_holders = get_import_path_holders(param.type) %}
            {% if path_holders is not none %}
                {%- for path_holder in path_holders -%}
                    {% if not path_holder.name in imported_paths and path_holder.name != codec.name + 'Codec' %}
                        {%- do imported_paths.append(path_holder.name) -%}
                        {{ path_holder.get_import_statement(True) }}
                    {% endif %}
                {% endfor %}
            {% endif %}
        {%- endfor -%}
    {%- endfor -%}
{%- endmacro %}
{% set fix_sized_params = fixed_params(codec.params) %}
{% set var_sized_params = var_size_params(codec.params) %}
/*
 * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable max-len */
{% if fix_sized_params|length != 0 %}
import {FixSizedTypesCodec} from '../builtin/FixSizedTypesCodec';
import {BitsUtil} from '../../BitsUtil';
{% endif %}
import {ClientMessage, BEGIN_FRAME, END_FRAME{% if fix_sized_params|length != 0 %}, Frame, DEFAULT_FLAGS{% endif %}} from '../../ClientMessage';
import {CodecUtil} from '../builtin/CodecUtil';
{% set codec_params = {'type': codec.name, 'name': codec.name} %}
{{ get_import_statements(fix_sized_params, var_sized_params, [codec_params]) }}
{% for param in fix_sized_params %}
const {{ to_upper_snake_case(param.name) }}_OFFSET = {% if loop.first %}0{% else %}{{ to_upper_snake_case(loop.previtem.name)}}_OFFSET + BitsUtil.{{ loop.previtem.type.upper() }}_SIZE_IN_BYTES{% endif %};
    {% if loop.last %}
const INITIAL_FRAME_SIZE = {{to_upper_snake_case(param.name)}}_OFFSET + BitsUtil.{{ param.type.upper() }}_SIZE_IN_BYTES;

    {% endif %}
{% endfor %}
export class {{ codec.name|capital }}Codec {
    static encode(clientMessage: ClientMessage, {{ param_name(codec.name) }}: {{ lang_types_encode(codec.name) }}): void {
        clientMessage.addFrame(BEGIN_FRAME.copy());
        {% for param in fix_sized_params %}
        {% if loop.first %}

        const initialFrame = Frame.createInitialFrame(INITIAL_FRAME_SIZE, DEFAULT_FLAGS);
        {% endif %}
        FixSizedTypesCodec.encode{{ param.type|capital }}(initialFrame.content, {{to_upper_snake_case(param.name)}}_OFFSET, {{ param_name(codec.name)}}.{{ param.name }});
        {% if loop.last %}
        clientMessage.addFrame(initialFrame);
        {% endif %}
        {% endfor %}
        {% for param in var_sized_params %}
        {% if loop.first %}

        {% endif %}
        {{ encode_var_sized(param) }};
        {% endfor %}

        clientMessage.addFrame(END_FRAME.copy());
    }

    static decode(clientMessage: ClientMessage): {{ lang_types_decode(codec.name) }} {
        // begin frame
        clientMessage.nextFrame();
        {% for param in fix_sized_params %}
        {% if loop.first %}

        const initialFrame = clientMessage.nextFrame();
        {% endif %}
        const {{ param.name }}: {{ lang_types_decode(param.type) }} = FixSizedTypesCodec.decode{{ param.type|capital }}(initialFrame.content, {{ to_upper_snake_case(param.name) }}_OFFSET);
        {% endfor %}
        {% for param in var_sized_params %}
        const {{ param.name }}: {{ lang_types_decode(param.type) }} = {{ decode_var_sized(param) }};
        {% endfor %}

        CodecUtil.fastForwardToEndFrame(clientMessage);

        return new {{ lang_types_decode(codec.name) }}({% for param in codec.params %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
    }
}

