{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{{ escape_keyword(param.name) }}, {{ item_type(lang_name, param.type) }}Codec.encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.encode, {{ value_type(lang_name, param.type) }}Codec.encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.encode, {{ value_type(lang_name, param.type) }}Codec.encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.encodeNullable(clientMessage, {{ param_name(codec.name)}}.{{ escape_keyword(param.name) }}, {{ lang_name(param.type) }}Codec.encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.encode(clientMessage, {{ param_name(codec.name)}}.{{ escape_keyword(param.name) }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ item_type(lang_name, param.type) }}Codec.decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.decode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ key_type(lang_name, param.type) }}Codec.decode, {{ value_type(lang_name, param.type) }}Codec.decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.decode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ key_type(lang_name, param.type) }}Codec.decode, {{ value_type(lang_name, param.type) }}Codec.decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.decodeNullable(clientMessage, {{ lang_name(param.type) }}Codec.decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.decode(clientMessage)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
{% macro get_import_statements() -%}
    {% set imported_paths = [] %}
    {%- for params in varargs -%}
        {% for param in params %}
            {% set path_holders = get_import_path_holders(param.type) %}
            {%- for path_holder in path_holders -%}
                {% if not path_holder.name in imported_paths and path_holder.name.endswith('Codec') %}
                    {%- do imported_paths.append(path_holder.name) -%}
                    {{ path_holder.get_import_statement(True) }}
                {% endif %}
            {% endfor %}
            {% set path_holders = get_import_path_holders(codec.name) %}
            {%- for path_holder in path_holders -%}
                {% if not path_holder.name in imported_paths and path_holder.name != codec.name + 'Codec' %}
                    {%- do imported_paths.append(path_holder.name) -%}
                    {{ path_holder.get_import_statement(True) }}
                {% endif %}
            {% endfor %}
        {%- endfor -%}
    {%- endfor -%}
{%- endmacro %}
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable max-len */
{% set fix_sized_params = fixed_params(codec.params) %}
{% set var_sized_params = var_size_params(codec.params) %}
{% set new_codec_params = new_params(codec.since, codec.params) %}
{% set fix_sized_new_params = new_params(codec.since, fix_sized_params) %}
{% set should_add_begin_frame = (fix_sized_params|length > fix_sized_new_params|length) or fix_sized_params|length == 0 %}
{% if fix_sized_params|length != 0 %}
import {FixSizedTypesCodec} from '../builtin/FixSizedTypesCodec';
import {BitsUtil} from '../../util/BitsUtil';
{% endif %}
import {ClientMessage, BEGIN_FRAME, END_FRAME{% if fix_sized_params|length != 0 %}, Frame, DEFAULT_FLAGS{% endif %}} from '../../protocol/ClientMessage';
import {CodecUtil} from '../builtin/CodecUtil';
{{ get_import_statements(fix_sized_params, var_sized_params) }}
{% for param in fix_sized_params %}
const {{ to_upper_snake_case(param.name) }}_OFFSET = {% if loop.first %}0{% else %}{{ to_upper_snake_case(loop.previtem.name)}}_OFFSET + BitsUtil.{{ loop.previtem.type.upper() }}_SIZE_IN_BYTES{% endif %};
    {% if loop.last %}
const INITIAL_FRAME_SIZE = {{to_upper_snake_case(param.name)}}_OFFSET + BitsUtil.{{ param.type.upper() }}_SIZE_IN_BYTES;

    {% endif %}
{% endfor %}
/** @internal */
export class {{ codec.name|capital }}Codec {
    static encode(clientMessage: ClientMessage, {{ param_name(codec.name) }}: {{ lang_types_encode(codec.name) }}): void {
        {% if should_add_begin_frame %}
        clientMessage.addFrame(BEGIN_FRAME.copy());
        {% endif %}
        {% for param in fix_sized_params %}
        {% if loop.first %}

        const initialFrame = Frame.createInitialFrame(INITIAL_FRAME_SIZE, DEFAULT_FLAGS);
        {% endif %}
        FixSizedTypesCodec.encode{{ param.type|capital }}(initialFrame.content, {{to_upper_snake_case(param.name)}}_OFFSET, {{ param_name(codec.name)}}.{{ escape_keyword(param.name) }});
        {% if loop.last %}
            {% if not should_add_begin_frame %}
        initialFrame.flags |= BEGIN_DATA_STRUCTURE_FLAG;
            {% endif %}
        clientMessage.addFrame(initialFrame);
        {% endif %}
        {% endfor %}
        {% for param in var_sized_params %}
            {% if loop.first %}

            {% endif %}
            {% if lang_types_encode(param.type) == '!skip' %}
                {% continue %}
            {% endif %}
        {{ encode_var_sized(param) }};
        {% endfor %}

        clientMessage.addFrame(END_FRAME.copy());
    }

    static decode(clientMessage: ClientMessage): {{ lang_types_decode(codec.name) }} {
        // begin frame
        {% if should_add_begin_frame %}
        clientMessage.nextFrame();
        {% endif %}
        {% for param in fix_sized_params %}
        {% if loop.first %}

        const initialFrame = clientMessage.nextFrame();
        {% endif %}
        {% if param in fix_sized_new_params %}
        let is{{ param.name|capital }}Exists = false;
        let {{ escape_keyword(param.name) }} = {% if param.type == 'boolean' %}false{% elif param.type == 'UUID' %}null{% else %}0{% endif %};
        if (initialFrame.content.length >= {{ to_upper_snake_case(param.name) }}_OFFSET + BitsUtil.{{ param.type.upper() }}_SIZE_IN_BYTES) {
            {{ escape_keyword(param.name) }} = FixSizedTypesCodec.decode{{ param.type|capital }}(initialFrame.content, {{ to_upper_snake_case(param.name) }}_OFFSET);
            is{{ param.name|capital }}Exists = true;
        }
        {% else %}
        const {{ escape_keyword(param.name) }} = FixSizedTypesCodec.decode{{ param.type|capital }}(initialFrame.content, {{ to_upper_snake_case(param.name) }}_OFFSET);
        {% endif %}
        {% endfor %}
        {% for param in var_sized_params %}
            {% if loop.first %}

            {% endif %}
            {% if lang_types_decode(param.type) == '!skip' %}
                {% continue %}
            {% endif %}
            {% if param in new_codec_params %}
        let is{{ param.name|capital }}Exists = false;
        let {{ escape_keyword(param.name) }} = null;
        if (!clientMessage.peekNextFrame().isEndFrame()) {
            {{ escape_keyword(param.name) }} = {{ decode_var_sized(param) }};
            is{{ param.name|capital }}Exists = true;
        }
            {% else %}
        const {{ escape_keyword(param.name) }} = {{ decode_var_sized(param) }};
            {% endif %}
        {% endfor %}

        CodecUtil.fastForwardToEndFrame(clientMessage);

        {% set ctor_params = [] %}
        {% for param in codec.params %}
            {% if lang_types_decode(param.type) != '!skip' %}
                {% do ctor_params.append(param) %}
            {% endif %}
        {% endfor %}
        return new {{ lang_types_decode(codec.name) }}({% for param in ctor_params %}{% if param in new_codec_params %}is{{ param.name|capital }}Exists, {% endif %}{{ escape_keyword(param.name) }}{% if not loop.last %}, {% endif %}{% endfor %});
    }
}

