{% macro encode_var_sized(param, loop_last) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        internal.ListMultiFrameCodec.Encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, internal.{{ item_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
            internal.EntryListCodec.Encode{% if param.nullable  %}_nullable{% endif %}(clientMessage, {{ param_name(param.name) }}, internal.{{ key_type(lang_name, param.type) }}Codec.Encode, internal.{{ value_type(lang_name, param.type) }}Codec.Encode{% if loop_last %}, True{% endif %})
    {%- elif is_var_sized_map(param.type) -%}
        internal.MapCodec.Encode{% if param.nullable  %}_nullable{% endif %}(clientMessage, {{ param_name(param.name) }}, internal.{{ key_type(lang_name, param.type) }}Codec.Encode, internal.{{ value_type(lang_name, param.type) }}Codec.Encode{% if loop_last %}, True{% endif %})
    {%- else -%}
        {%- if param.nullable  -%}
            internal.CodecUtil.EncodeNullable(clientMessage, {{ param_name(param.name) }}, internal.{{ lang_name(param.type) }}Codec.Encode{% if loop_last %}, True{% endif %})
        {%- else -%}
            internal.{{ lang_name(param.type) }}Codec.Encode(clientMessage, {{ param_name(param.name) }}{% if loop_last %}, True{% endif %})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        internal.ListMultiFrameCodec.Decode{% if is_var_sized_list_contains_nullable(param.type) %}_contains_nullable{% endif %}{% if param.nullable  %}_nullable{% endif %}(msg, {{ item_type(lang_name, param.type) }}Codec.decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        internal.EntryListCodec.Decode{% if param.nullable  %}Nullable{% endif %}(frameIterator, internal.{{ key_type(lang_name, param.type) }}Codec.Decode, internal.{{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_map(param.type) -%}
        internal.MapCodec.Decode{% if param.nullable  %}Nullable{% endif %}(v, internal.{{ key_type(lang_name, param.type) }}Codec.Decode, internal.{{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- else -%}
        {%- if param.nullable  -%}
            internal.CodecUtil.DecodeNullable(frameIterator, internal.{{ lang_name(param.type) }}Codec.Decode)
        {%- else -%}
            internal.{{ lang_name(param.type) }}Codec.Decode(frameIterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}

{% macro get_import_statements() -%}
    {% set imported_paths = [] %}
    {%- for params in varargs -%}
        {% for param in params %}
            {% set path_holders = get_import_path_holders(param.type) %}
            {% if path_holders is not none %}
                {%- for path_holder in path_holders -%}
                    {% if not path_holder.path in imported_paths%}
                        {%- do imported_paths.append(path_holder.path) -%}
                        {{ path_holder.get_import_statement() }}
                    {% endif %}
                {% endfor %}
            {% endif %}
        {%- endfor -%}
    {%- endfor -%}
{%- endmacro %}
{% set request_fix_sized_params = fixed_params(method.request.params) %}
{% set request_var_sized_params = var_size_params(method.request.params) %}
{% set response_fix_sized_params = fixed_params(method.response.params) %}
{% set response_var_sized_params = var_size_params(method.response.params) %}
{% set response_new_params = new_params(method.since, method.response.params) %}
{% set event_fix_sized_params = [] %}
{% set event_var_sized_params = [] %}
{% if method.events|length != 0 %}
    {% for event in method.events %}
        {% do event_fix_sized_params.extend(fixed_params(event.params)) %}
        {% do event_var_sized_params.extend(var_size_params(event.params)) %}
    {% endfor %}
{% endif %}
// Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package codec

import (
    "github.com/hazelcast/hazelcast-go-client/hazelcast/protocol"
{{get_import_statements(request_fix_sized_params, request_var_sized_params, response_fix_sized_params, response_var_sized_params, event_fix_sized_params, event_var_sized_params)|indent(4, True)}})

const(
    // hex: {{ '0x%06X'|format(method.request.id) }}
    {{ service_name|capital }}{{ method.name|capital }}CodecRequestMessageType int32 = {{ method.request.id }}
    // hex: {{ '0x%06X'|format(method.response.id) }}
    {{ service_name|capital }}{{ method.name|capital }}CodecResponseMessageType int32 = {{ method.response.id }}

{% for event in method.events%}
    // hex: {{ '0x%06X'|format(event.id) }}
    {{ service_name|capital }}{{ method.name|capital }}CodecEvent{{ event.name|capital }}MessageType int32 = {{ event.id }}

{% endfor %}
{#FIXED SIZED PARAMETER OFFSET CONSTANTS#}
{% for param in request_fix_sized_params %}
    {{ service_name|capital }}{{ method.name|capital }}CodecRequest{{ param.name|capital }}Offset = {% if loop.first %}protocol.PartitionIDOffset + protocol.IntSizeInBytes{% else %}{{ service_name|capital }}{{ method.name|capital }}CodecRequest{{ loop.previtem.name|capital }}Offset + protocol.{{ loop.previtem.type|capitalize }}SizeInBytes{% endif %}

    {% if loop.last %}
    {{ service_name|capital }}{{ method.name|capital }}CodecRequestInitialFrameSize = {{ service_name|capital }}{{ method.name|capital }}CodecRequest{{ param.name|capital }}Offset + protocol.{{ param.type|capitalize }}SizeInBytes

    {% endif %}
{% else %}
    {{ service_name|capital }}{{ method.name|capital }}CodecRequestInitialFrameSize = protocol.PartitionIDOffset + protocol.IntSizeInBytes

{% endfor %}
{% for param in response_fix_sized_params %}
    {{ service_name|capital }}{{ method.name|capital }}Response{{ param.name|capital }}Offset = {% if loop.first %}protocol.ResponseBackupAcksOffset + protocol.ByteSizeInBytes{% else %}{{ service_name|capital }}{{ method.name|capital }}Response{{ loop.previtem.name|capital }}Offset + protocol.{{ loop.previtem.type|capitalize }}SizeInBytes{% endif %}

{% endfor %}
{% for event in method.events %}
    {% for param in fixed_params(event.params) %}
    {{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}{{param.name|capital}}Offset = {% if loop.first %}protocol.PartitionIDOffset + protocol.IntSizeInBytes{% else %}{{ service_name|capital }}{{ method.name|capital }}Event{{ event.name|capital }}{{ loop.previtem.name|capital }}Offset + protocol.{{loop.previtem.type|capitalize}}SizeInBytes{% endif %}

    {% endfor %}
{% endfor %}
)
{#RESPONSE PARAMETERS#}
{% set noResponseValue = method.response.params|length == 0 %}
{% set singleResponseValue = method.response.params|length == 1 and response_new_params|length == 0 %}

{% for line in method.doc.splitlines() %}
// {{ line }}
{% endfor %}
type {{ service_name|lower }}{{ method.name|capital }}Codec struct {}

var {{ service_name|capital }}{{ method.name|capital }}Codec {{ service_name|lower }}{{ method.name|capital }}Codec

func ({{ service_name|lower }}{{ method.name|capital }}Codec) EncodeRequest({% for param in method.request.params %}{{ escape_keyword(param.name) }} {{ lang_types_encode(param.type) }}{% if not loop.last %}, {% endif %}{% endfor %}) *protocol.ClientMessage {
    clientMessage := protocol.NewClientMessageForEncode()
    clientMessage.SetRetryable({{ method.request.retryable|lower }})

    initialFrame := protocol.NewFrame(make([]byte, {{ service_name|capital }}{{ method.name|capital }}CodecRequestInitialFrameSize))
{% for param in request_fix_sized_params %}
    internal.FixSizedTypesCodec.Encode{{ param.type|capital }}(initialFrame.Content, {{ service_name|capital }}{{ method.name|capital }}CodecRequest{{ param.name|capital }}Offset, {{ escape_keyword(param.name) }})
{% endfor %}
    clientMessage.AddFrame(initialFrame)
    clientMessage.SetMessageType({{ service_name|capital }}{{ method.name|capital }}CodecRequestMessageType)
    clientMessage.SetPartitionId(-1)

{% for param in request_var_sized_params %}
    {{ encode_var_sized(param) }}
{% endfor %}

    return clientMessage
}

{#RESPONSE DECODE#}
{% if noResponseValue %}
{% elif singleResponseValue %}
    {% set param = method.response.params|last %}

func ({{ service_name|lower }}{{ method.name|capital }}Codec) DecodeResponse(clientMessage *protocol.ClientMessage) {{ lang_types_decode(param.type) }} {
    frameIterator := clientMessage.FrameIterator()
{% if  response_fix_sized_params|length != 0 %}
    initialFrame := frameIterator.Next()
{% else %}
    // empty initial frame
    frameIterator.Next()
{% endif %}

{% for param in response_fix_sized_params %}
    return internal.FixSizedTypesCodec.Decode{{ param.type|capital }}(initialFrame.Content, {{ service_name|capital }}{{ method.name|capital }}Response{{param.name|capital}}Offset)
{% endfor %}
{% for param in response_var_sized_params %}
    return {{ decode_var_sized(param) }}
{% endfor %}
}
{% else %}

func ({{ service_name|lower }}{{ method.name|capital }}Codec) DecodeResponse(clientMessage *protocol.ClientMessage) ({% for param in method.response.params %}{{ escape_keyword(param.name)}} {{ lang_types_encode(param.type) }}{{ ", " if not loop.last }}{% endfor %} {% for new_param in response_new_params %} is{{ new_param.name|capital }}Exists: boolean;{% endfor %}) {
{% if  response_fix_sized_params|length != 0 %}
    initialFrame := clientMessage.FrameIterator().Next()
{% else %}
    frameIterator := clientMessage.FrameIterator()
    frameIterator.Next()
{% endif %}

{% for param in response_fix_sized_params %}
    {% if param in response_new_params %}
        if (initialFrame.content.length >= RESPONSE_{{ to_upper_snake_case(param.name) }}_OFFSET + BitsUtil.{{ param.type.upper() }}_SIZE_IN_BYTES) {
        response.{{ escape_keyword(param.name) }} = internal.FixSizedTypesCodec.Decode{{ param.type|capital }}(initialFrame.Content, RESPONSE_{{to_upper_snake_case(param.name)}}_OFFSET);
        response.is{{ param.name|capital }}Exists = true;
        } else {
        response.is{{ param.name|capital }}Exists = false;
        }
    {% else %}
    {{ escape_keyword(param.name) }} = internal.FixSizedTypesCodec.Decode{{ param.type|capital }}(initialFrame.Content, {{ service_name|capital }}{{ method.name|capital }}Response{{ param.name|capital }}Offset)
    {% endif %}
{% endfor %}
{% for param in response_var_sized_params %}
    {% if param in response_new_params %}
        if (clientMessage.hasNextFrame()) {
        response.{{ escape_keyword(param.name) }} = {{ decode_var_sized(param) }};
        response.is{{ param.name|capital }}Exists = true;
        } else {
        response.is{{ param.name|capital }}Exists = false;
        }
    {% else %}
    {{ escape_keyword(param.name) }} := {{ decode_var_sized(param) }}
    {% endif %}
{% endfor %}

    return {% for param in method.response.params %}{{ escape_keyword(param.name)}}{{ ", " if not loop.last }}{% endfor %} {% for new_param in response_new_params %} is{{ new_param.name|capital }}Exists: boolean;{% endfor %}

}
{% endif %}

{# EVENTS#}
{% if method.events|length != 0 %}


    func ({{ service_name|lower }}{{ method.name|capital }}Codec) DecodeResponse(clientMessage *protocol.ClientMessage){
        message_type := clientMessage.GetMessageType()
    }
    message_type = msg.get_message_type()
    {% for event in method.events %}
        if message_type == _EVENT_{{ to_upper_snake_case(event.name) }}_MESSAGE_TYPE and handle_{{ param_name(event.name) }}_event is not None:
        {% set new_event_params = new_params(event.since, event.params) %}
        {% if fixed_params(event.params)|length != 0 %}
            initial_frame = msg.next_frame()
        {% else %}
            msg.next_frame()
        {% endif %}
        {% for param in fixed_params(event.params) %}
            {% do lang_types_decode(param.type) %}
            {% if param in new_event_params %}
                is_{{ param_name(param.name) }}_exists = False
                {{ param_name(param.name) }} = {% if param.type == 'boolean' %}False{% elif param.type == 'UUID' %}None{% else %}0{% endif %}

                if len(initial_frame.buf) >= _EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_OFFSET + {{ param.type.upper() }}_SIZE_IN_BYTES:
                {{ param_name(param.name) }} = FixSizedTypesCodec.decode_{{ param.type|lower }}(initial_frame.buf, _EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_OFFSET)
                is_{{ param_name(param.name) }}_exists = True
            {% else %}
                {{ param_name(param.name) }} = FixSizedTypesCodec.decode_{{ param.type|lower }}(initial_frame.buf, _EVENT_{{ to_upper_snake_case(event.name)}}_{{ to_upper_snake_case(param.name) }}_OFFSET)
            {% endif %}
        {% endfor %}
        {% for param in var_size_params(event.params) %}
            {% do lang_types_decode(param.type) %}
            {% if param in new_event_params %}
                is_{{ param_name(param.name) }}_exists = False
                {{ param_name(param.name) }} = None
                if msg.has_next_frame():
                {{ param_name(param.name) }} = {{ decode_var_sized(param) }}
                is_{{ param_name(param.name) }}_exists = True
            {% else %}
                {{ param_name(param.name) }} = {{ decode_var_sized(param) }}
            {% endif %}
        {% endfor %}
        handle_{{ param_name(event.name) }}_event({% for param in event.params %}{% if param in new_event_params %}is_{{ param_name(param.name) }}_exists, {% endif %}{{ param_name(param.name) }}{% if not loop.last %}, {% endif %}{% endfor %})
        return
    {% endfor %}
{% endif %}
