{% macro encode_var_sized(param, is_final) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        msg.set{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}({{ param.name }}{% if is_final %}, true{% endif %});
{#
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ key_type(lang_name, param.type) }}Codec::encode, {{ value_type(lang_name, param.type) }}Codec::encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param.name }}, {{ key_type(lang_name, param.type) }}Codec::encode, {{ value_type(lang_name, param.type) }}Codec::encode)
#}
    {%- else -%}
            msg.set{% if param.nullable  %}Nullable{% endif %}({{ param.name }}{% if is_final %}, true{% endif %});
    {% endif %}
{%- endmacro %}
/*
 * Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// @Generated("!codec_hash!")

#pragma once

#include "{{ codec.name.lower() }}_codec.h"

{% set fix_sized_params = fixed_params(codec.params) %}
{% set var_sized_params = var_size_params(codec.params) %}
{% set should_add_begin_frame = fix_sized_params|length == 0 %}
void hazelcast::client::protocol::codec::{{ codec.name.lower() }}_encode(ClientMessage &msg, const {{ lang_types_encode(codec.name) }} &{{ param_name(codec.name) }}, bool is_final) {
        size_t initial_frame_size = ClientMessage::SIZE_OF_FRAME_LENGTH_AND_FLAGS + {% for param in fix_sized_params %} {% if not loop.first %} + {% endif %}{{ get_size(param.type) }} {% endfor %};

        {% if should_add_begin_frame %}
        auto *h = reinterpret_cast<ClientMessage::frame_header_t *>(msg.wr_ptr(sizeof(ClientMessage::BEGIN_FRAME)));
        *h = ClientMessage::BEGIN_FRAME;
        {% endif %}

        auto *initial_frame = reinterpret_cast<ClientMessage::frame_header_t *>(msg.wr_ptr(sizeof(frame_header_t)));
        initial_frame->frame_len = initial_frame_size;
        initial_frame->flags = ClientMessage::DEFAULT_FLAGS;
        {% for param in request_fix_sized_params %}
        msg.set({{ param.name }});
        {% endfor %}
        {% for i in range(0, request_var_sized_params|length ) %}
        {{ encode_var_sized(request_var_sized_params[i], i == (request_var_sized_params|length - 1) ) }}
        {% endfor %}

        auto *h = reinterpret_cast<ClientMessage::frame_header_t *>(msg.wr_ptr(sizeof(ClientMessage::END_FRAME)));
        *h = ClientMessage::END_FRAME;
}



