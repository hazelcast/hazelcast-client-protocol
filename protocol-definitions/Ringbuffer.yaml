id: 25
name: Ringbuffer
methods:
  - id: 1
    name: size
    since: 2.0
    doc: |
      Returns number of items in the ringbuffer. If no ttl is set, the size will always be equal to capacity after the
      head completed the first looparound the ring. This is because no items are getting retired.
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the size
  - id: 2
    name: tailSequence
    since: 2.0
    doc: |
      Returns the sequence of the tail. The tail is the side of the ringbuffer where the items are added to.
      The initial value of the tail is -1.
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the sequence of the tail
  - id: 3
    name: headSequence
    since: 2.0
    doc: |
      Returns the sequence of the head. The head is the side of the ringbuffer where the oldest items in the ringbuffer
      are found. If the RingBuffer is empty, the head will be one more than the tail.
      The initial value of the head is 0 (1 more than tail).
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the sequence of the head
  - id: 4
    name: capacity
    since: 2.0
    doc: |
      Returns the capacity of this Ringbuffer.
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the capacity
  - id: 5
    name: remainingCapacity
    since: 2.0
    doc: |
      Returns the remaining capacity of the ringbuffer. The returned value could be stale as soon as it is returned.
      If ttl is not set, the remaining capacity will always be the capacity.
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the remaining capacity
  - id: 6
    name: add
    since: 2.0
    doc: |
      Adds an item to the tail of the Ringbuffer. If there is space in the ringbuffer, the call
      will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens:
      OverflowPolicy OVERWRITE we just overwrite the oldest item in the ringbuffer and we violate the ttl
      OverflowPolicy FAIL we return -1. The reason that FAIL exist is to give the opportunity to obey the ttl.
      <p/>
      This sequence will always be unique for this Ringbuffer instance so it can be used as a unique id generator if you are
      publishing items on this Ringbuffer. However you need to take care of correctly determining an initial id when any node
      uses the ringbuffer for the first time. The most reliable way to do that is to write a dummy item into the ringbuffer and
      use the returned sequence as initial  id. On the reading side, this dummy item should be discard. Please keep in mind that
      this id is not the sequence of the item you are about to publish but from a previously published item. So it can't be used
      to find that item.
    request:
      retryable: false
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
        - name: overflowPolicy
          type: int
          nullable: false
          since: 2.0
          doc: |
            the OverflowPolicy to use.
        - name: value
          type: Data
          nullable: false
          since: 2.0
          doc: |
            to item to add
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the sequence of the added item, or -1 if the add failed.
  - id: 8
    name: readOne
    since: 2.0
    doc: |
      Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an
      item is added. This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple
      readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this
      call is going to block. In the future we could add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit).
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
        - name: sequence
          type: long
          nullable: false
          since: 2.0
          doc: |
            the sequence of the item to read.
    response:
      params:
        - name: response
          type: Data
          nullable: true
          since: 2.0
          doc: |
            the read item
  - id: 9
    name: addAll
    since: 2.0
    doc: |
      Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls
      to add(Object) due to better io utilization and a reduced number of executed operations. If the batch is empty,
      the call is ignored. When the collection is not empty, the content is copied into a different data-structure.
      This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable.
      If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be
      overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection.
      If an addAll is executed concurrently with an add or addAll, no guarantee is given that items are contiguous.
      The result of the future contains the sequenceId of the last written item
    request:
      retryable: false
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
        - name: valueList
          type: List_Data
          nullable: false
          since: 2.0
          doc: |
            the batch of items to add
        - name: overflowPolicy
          type: int
          nullable: false
          since: 2.0
          doc: |
            the overflowPolicy to use
    response:
      params:
        - name: response
          type: long
          nullable: false
          since: 2.0
          doc: |
            the ICompletableFuture to synchronize on completion.
  - id: 10
    name: readMany
    since: 2.0
    doc: |
      Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller
      than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount.
      If there are less items available than minCount, then this call blacks. Reading a batch of items is likely to
      perform better because less overhead is involved. A filter can be provided to only select items that need to be read.
      If the filter is null, all items are read. If the filter is not null, only items where the filter function returns
      true are returned. Using filters is a good way to prevent getting items that are of no value to the receiver.
      This reduces the amount of IO and the number of operations being executed, and can result in a significant performance improvement.
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the Ringbuffer
        - name: startSequence
          type: long
          nullable: false
          since: 2.0
          doc: |
            the startSequence of the first item to read
        - name: minCount
          type: int
          nullable: false
          since: 2.0
          doc: |
            the minimum number of items to read.
        - name: maxCount
          type: int
          nullable: false
          since: 2.0
          doc: |
            the maximum number of items to read.
        - name: filter
          type: Data
          nullable: true
          since: 2.0
          doc: |
            Filter is allowed to be null, indicating there is no filter.
    response:
      params:
        - name: readCount
          type: int
          nullable: false
          since: 2.0
          doc: |
            TODO DOC
        - name: items
          type: List_Data
          nullable: false
          since: 2.0
          doc: |
            TODO DOC
        - name: itemSeqs
          type: longArray
          nullable: true
          since: 2.0
          doc: |
            TODO DOC
        - name: nextSeq
          type: long
          nullable: false
          since: 2.0
          doc: |
            TODO DOC
