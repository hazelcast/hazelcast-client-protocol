id: 12
name: CountDownLatch
methods:
  - id: 1
    name: await
    since: 2.0
    doc: |
      Causes the current thread to wait until the latch has counted down to zero, or an exception is thrown, or the
      specified waiting time elapses. If the current count is zero then this method returns immediately with the value
      true. If the current count is greater than zero, then the current thread becomes disabled for thread scheduling
      purposes and lies dormant until one of five things happen: the count reaches zero due to invocations of the
      #countDown method, this ICountDownLatch instance is destroyed, the countdown owner becomes disconnected, some
      other thread Thread#interrupt interrupts the current thread, or the specified waiting time elapses. If the count
      reaches zero, then the method returns with the value true. If the current thread: has its interrupted status set
      on entry to this method, or is Thread#interrupt interrupted while waiting, then INTERRUPTED is thrown
      and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false
      is returned.  If the time is less than or equal to zero, the method will not wait at all.
    request:
      retryable: false
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the CountDownLatch
        - name: timeout
          type: long
          nullable: false
          since: 2.0
          doc: |
            The maximum time in milliseconds to wait
    response:
      params:
        - name: response
          type: boolean
          nullable: false
          since: 2.0
          doc: |
            True if the count reached zero, false if the waiting time elapsed before the count reached zero
  - id: 2
    name: countDown
    since: 2.0
    doc: |
      Decrements the count of the latch, releasing all waiting threads if the count reaches zero. If the current count
      is greater than zero, then it is decremented. If the new count is zero: All waiting threads are re-enabled for
      thread scheduling purposes, and Countdown owner is set to null. If the current count equals zero, then nothing happens.
    request:
      retryable: false
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the CountDownLatch
    response: {}
  - id: 3
    name: getCount
    since: 2.0
    doc: |
      Returns the current count.
    request:
      retryable: true
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the CountDownLatch
    response:
      params:
        - name: response
          type: int
          nullable: false
          since: 2.0
          doc: |
            The current count for the latch.
  - id: 4
    name: trySetCount
    since: 2.0
    doc: |
      Sets the count to the given value if the current count is zero. If the count is not zero, then this method does
      nothing and returns false
    request:
      retryable: false
      acquiresResource: false
      partitionIdentifier: name
      params:
        - name: name
          type: String
          nullable: false
          since: 2.0
          doc: |
            Name of the CountDownLatch
        - name: count
          type: int
          nullable: false
          since: 2.0
          doc: |
            The number of times countDown must be invoked before threads can pass through await
    response:
      params:
        - name: response
          type: boolean
          nullable: false
          since: 2.0
          doc: |
            True if the new count was set, false if the current count is not zero.
