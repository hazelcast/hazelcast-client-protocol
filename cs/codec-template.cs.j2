{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, {{ item_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Encode(clientMessage, {{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ escape_keyword(param.name) }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.EncodeNullable(clientMessage, {{ escape_keyword(param.name) }}, {{ lang_name(param.type) }}Codec.Encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Encode(clientMessage, {{ escape_keyword(param.name) }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(iterator, {{ item_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Decode(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.DecodeNullable(iterator, {{ lang_name(param.type) }}Codec.Decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Codec.Custom;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;
{% if method.events|length != 0 %}
using Hazelcast.Logging;
{% endif %}

{% if namespace %}
namespace {{ namespace }}
{% else %}
namespace Hazelcast.Client.Protocol.Codec
{% endif %}
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    /// <summary>
    {% for line in method.doc.splitlines() %}
    /// {{ line }}
    {% endfor %}
    ///</summary>
    internal static class {{ service_name|capital }}{{ method.name|capital }}Codec
    {
        //hex: {{ '0x%06X'|format(method.request.id) }}
        public const int RequestMessageType = {{ method.request.id }};
        //hex: {{ '0x%06X'|format(method.response.id) }}
        public const int ResponseMessageType = {{ method.response.id }};
    {#FIXED SIZED PARAMETER OFFSET CONSTANTS#}
    {% for param in fixed_params(method.request.params) %}
        private const int Request{{param.name|capital}}FieldOffset = {% if loop.first %}PartitionIdFieldOffset + IntSizeInBytes{% else %}Request{{ loop.previtem.name|capital}}FieldOffset + {{lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int RequestInitialFrameSize = Request{{param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
    {% else %}
        private const int RequestInitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes;
    {% endfor %}
    {% for param in fixed_params(method.response.params) %}
        private const int Response{{param.name|capital}}FieldOffset = {% if loop.first %}ResponseBackupAcksFieldOffset + IntSizeInBytes{% else %}Response{{ loop.previtem.name|capital}}FieldOffset + {{lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int ResponseInitialFrameSize = Response{{param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
    {% else %}
        private const int ResponseInitialFrameSize = ResponseBackupAcksFieldOffset + IntSizeInBytes;
    {% endfor %}
    {% for event in method.events%}
        {% for param in fixed_params(event.params) %}
        private const int Event{{event.name|capital}}{{param.name|capital}}FieldOffset = {% if loop.first %}PartitionIdFieldOffset + IntSizeInBytes{% else %}Event{{ event.name|capital}}{{ loop.previtem.name|capital}}FieldOffset + {{lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int Event{{event.name|capital}}InitialFrameSize = Event{{event.name|capital}}{{param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
        {% else %}
        private const int Event{{event.name|capital}}InitialFrameSize = PartitionIdFieldOffset + IntSizeInBytes;
        {% endfor %}
        // hex: {{ '0x%06X'|format(event.id) }}
        private const int Event{{event.name|capital}}MessageType = {{ event.id }};
    {% endfor %}

    {#REQUEST PARAMETERS#}
        public class RequestParameters
        {
        {% for param in method.request.params %}

            /// <summary>
            {% for line in param.doc.splitlines() %}
            /// {{ line }}
            {% endfor %}
            ///</summary>
            public {{ lang_types_decode(param.type) }} {{ param.name|capital }};
        {% endfor %}
        }

    {#RequestENCODE#}
        public static ClientMessage EncodeRequest({% for param in method.request.params %}{{ lang_types_encode(param.type) }} {{param.name}}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            var clientMessage = CreateForEncode();
            clientMessage.IsRetryable = {{ method.request.retryable|lower }};
            clientMessage.AcquiresResource = {{ method.request.acquiresResource|lower }};
            clientMessage.OperationName = "{{ service_name|capital }}.{{ method.name|capital }}";
            var initialFrame = new Frame(new byte[RequestInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, RequestMessageType);
        {% for param in fixed_params(method.request.params) %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, Request{{param.name|capital}}FieldOffset, {{ param.name }});
        {% endfor %}
            clientMessage.Add(initialFrame);
        {% for param in var_size_params(method.request.params) %}
            {{ encode_var_sized(param) }};
        {% endfor %}
            return clientMessage;
        }

    {#RequestDECODE#}
        public static RequestParameters DecodeRequest(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var request = new RequestParameters();
        {% if  fixed_params(method.request.params)|length != 0 %}
            var initialFrame = iterator.Next();
        {% else %}
            //empty initial frame
            iterator.Next();
        {% endif %}
        {% for param in fixed_params(method.request.params) %}
            request.{{ param.name|capital }} =  Decode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, Request{{param.name|capital}}FieldOffset);
        {% endfor %}
        {% for param in var_size_params(method.request.params) %}
            request.{{ param.name|capital }} = {{ decode_var_sized(param) }};
        {% endfor %}
            return request;
        }

    {#RESPONSE PARAMETERS#}
        public class ResponseParameters
        {
    {% for param in method.response.params %}

            /// <summary>
            {% for line in param.doc.splitlines() %}
            /// {{ line }}
            {% endfor %}
            ///</summary>
            public {{ lang_types_decode(param.type) }} {{ param.name|capital }};
    {% endfor %}
        }

    {#RESPONSE ENCODE#}
        public static ClientMessage EncodeResponse({% for param in method.response.params %}{{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[ResponseInitialFrameSize], UnfragmentedMessage);
            EncodeInt(initialFrame.Content, TypeFieldOffset, ResponseMessageType);
            clientMessage.Add(initialFrame);

        {% for param in fixed_params(method.response.params) %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, Response{{param.name|capital}}FieldOffset, {{ escape_keyword(param.name) }});
        {% endfor %}
        {% for param in var_size_params(method.response.params) %}
            {{ encode_var_sized(param) }};
        {% endfor %}
            return clientMessage;
        }

    {#RESPONSE DECODE#}
        public static ResponseParameters DecodeResponse(ClientMessage clientMessage)
        {
            var iterator = clientMessage.GetIterator();
            var response = new ResponseParameters();
            {% if  fixed_params(method.response.params)|length != 0 %}
            var initialFrame = iterator.Next();
            {% else %}
            //empty initial frame
            iterator.Next();
            {% endif %}
        {% for param in fixed_params(method.response.params) %}
            response.{{ param.name|capital }} = Decode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, Response{{param.name|capital}}FieldOffset);
        {% endfor %}
        {% for param in var_size_params(method.response.params) %}
            response.{{ param.name|capital }} = {{ decode_var_sized(param) }};
        {% endfor %}
            return response;
        }
    {# EVENTS#}
    {% if method.events|length != 0 %}
    {% for event in method.events%}

        public static ClientMessage Encode{{ event.name|capital }}Event({% for param in event.params %}{{ lang_types_encode(param.type) }} {{param.name}}{% if not loop.last %}, {% endif %}{% endfor %})
        {
            var clientMessage = CreateForEncode();
            var initialFrame = new Frame(new byte[Event{{ event.name|capital}}InitialFrameSize], UnfragmentedMessage);
            initialFrame.Flags |= IsEventFlag;
            EncodeInt(initialFrame.Content, TypeFieldOffset, Event{{ (event.name|capital)}}MessageType);
        {% for param in fixed_params(event.params) %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, Event{{ (event.name|capital)}}{{(param.name|capital)}}FieldOffset, {{ param.name }});
        {% endfor %}
            clientMessage.Add(initialFrame);
        {% for param in var_size_params(event.params) %}
            {{ encode_var_sized(param) }};
        {% endfor %}
            return clientMessage;
        }
        {% endfor %}

        public static class EventHandler
        {
            public static void HandleEvent(ClientMessage clientMessage{% for event in method.events%}, Handle{{ event.name|capital }}Event handle{{ event.name|capital }}Event{% endfor %})
            {
                var messageType = clientMessage.MessageType;
                var iterator = clientMessage.GetIterator();
            {% for event in method.events%}
                if (messageType == Event{{(event.name|capital)}}MessageType) {
                {% if  fixed_params(event.params)|length != 0 %}
                    var initialFrame = iterator.Next();
                {% else %}
                    //empty initial frame
                    iterator.Next();
                {% endif %}
                {% for param in fixed_params(event.params) %}
                    {{ lang_types_decode(param.type) }} {{param.name}} =  Decode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, Event{{(event.name|capital)}}{{param.name|capital}}FieldOffset);
                {% endfor %}
                {% for param in var_size_params(event.params) %}
                    {{ lang_types_decode(param.type) }} {{param.name}} = {{ decode_var_sized(param) }};
                {% endfor %}
                    handle{{ event.name|capital }}Event({% for param in event.params %}{{param.name}}{% if not loop.last %}, {% endif %}{% endfor %});
                    return;
                }
            {% endfor %}
                Logger.GetLogger(typeof(EventHandler)).Finest("Unknown message type received on event handler :" + messageType);
            }
        {% for event in method.events%}
            public delegate void Handle{{ event.name|capital }}Event({% for param in event.params %}{{ lang_types_encode(param.type) }} {{param.name}}{% if not loop.last %}, {% endif %}{% endfor %});
        {% endfor %}
        }
    {% endif %}
    }
}
