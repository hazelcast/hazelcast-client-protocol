{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ item_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.EncodeNullable)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.EncodeNullable(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ lang_name(param.type) }}Codec.Encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Encode(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(iterator, {{ item_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.DecodeNullable(iterator, {{ lang_name(param.type) }}Codec.Decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
// Copyright (c) 2008-2021, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// <auto-generated>
//   This code was generated by a tool.
//     Hazelcast Client Protocol Code Generator
//     https://github.com/hazelcast/hazelcast-client-protocol
//   Change to this file will be lost if the code is regenerated.
// </auto-generated>

#pragma warning disable IDE0051 // Remove unused private members
// ReSharper disable UnusedMember.Local
// ReSharper disable RedundantUsingDirective
// ReSharper disable CheckNamespace

using System;
using System.Collections.Generic;
using Hazelcast.Protocol.BuiltInCodecs;
using Hazelcast.Protocol.CustomCodecs;
using Hazelcast.Core;
using Hazelcast.Messaging;
using Hazelcast.Clustering;
using Hazelcast.Serialization;
using Microsoft.Extensions.Logging;

{% if namespace %}
namespace {{ namespace }}
{% else %}
namespace Hazelcast.Protocol.CustomCodecs
{% endif %}
{
    internal static class {{ codec.name|capital }}Codec
    {
        {% for param in fixed_params(codec.params) %}
        private const int {{ param.name|capital }}FieldOffset = {% if loop.first %}0{% else %}{{ loop.previtem.name|capital}}FieldOffset + BytesExtensions.SizeOf{{ lang_types_decode(loop.previtem.type)|capital}}{% endif %};
        {% if loop.last %}
        private const int InitialFrameSize = {{ param.name|capital}}FieldOffset + BytesExtensions.SizeOf{{lang_types_decode(param.type)|capital}};
        {% endif %}
        {% endfor %}

        public static void Encode(ClientMessage clientMessage, {{ lang_types_encode(codec.name) }} {{ param_name(codec.name) }})
        {
            clientMessage.Append(Frame.CreateBeginStruct());
            {% for param in fixed_params(codec.params) %}
            {% if loop.first %}

            var initialFrame = new Frame(new byte[InitialFrameSize]);
            {% endif %}
            initialFrame.Bytes.Write{{ lang_types_decode(param.type)|capital }}L({{ param.name|capital}}FieldOffset, {% if param.type == 'enum' %}(int) {% endif %}{{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }});
            {% if loop.last %}
            clientMessage.Append(initialFrame);
            {% endif %}
            {% endfor %}
            {% for param in var_size_params(codec.params) %}
            {% if loop.first %}

            {% endif %}
            {{ encode_var_sized(param) }};
            {% endfor %}

            clientMessage.Append(Frame.CreateEndStruct());
        }

        public static {{ lang_types_decode(codec.name) }} Decode(IEnumerator<Frame> iterator)
        {
            // begin frame
            iterator.Take();
            {% for param in fixed_params(codec.params) %}
            {% if loop.first %}

            var initialFrame = iterator.Take();
            {% endif %}
            {% if param in new_params(codec.since, fixed_params(codec.params)) %}
            var is{{ param.name|capital }}Exists = false;
            {{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}} = default;
            if (initialFrame.Bytes.Length >= {{param.name|capital}}FieldOffset + BytesExtensions.SizeOf{{lang_types_decode(param.type)|capital}})
            {
                {{escape_keyword(param.name)}} = initialFrame.Bytes.Read{{ lang_types_decode(param.type)|capital }}L({{  param.name|capital }}FieldOffset);
                is{{ param.name|capital }}Exists = true;
            }
            {% else %}
            var {{ escape_keyword(param.name) }} = initialFrame.Bytes.Read{{ lang_types_decode(param.type)|capital }}L({{  param.name|capital }}FieldOffset);
            {% endif %}
                {% if loop.first %}

                {% endif %}
            {% endfor %}
            {% for param in var_size_params(codec.params) %}
            {% if param in new_params(codec.since, var_size_params(codec.params)) %}
            var is{{ param.name|capital }}Exists = false;
            {{ lang_types_encode(param.type) }} {{escape_keyword(param.name)}} = default;
            if (iterator.NextIsNotTheEnd())
            {
                {{escape_keyword(param.name)}} = {{ decode_var_sized(param) }};
                is{{ param.name|capital }}Exists = true;
            }
            {% else %}
            var {{ escape_keyword(param.name) }} = {{ decode_var_sized(param) }};
            {% endif %}
                {% if loop.last %}

                {% endif %}
            {% endfor %}
            iterator.SkipToStructEnd();
            {% if codec.returnWithFactory %}
            return CustomTypeFactory.Create{{ codec.name }}({% for param in codec.params %}{% if param in new_params(codec.since, codec.params) %}is{{ param.name|capital }}Exists, {% endif %}{{ escape_keyword(param.name) }}{% if not loop.last %}, {% endif %}{% endfor %});
            {% else %}
            return new {{ lang_types_decode(codec.name) }}({% for param in codec.params %}{% if param in new_params(codec.since, codec.params) %}is{{ param.name|capital }}Exists, {% endif %}{{ escape_keyword(param.name) }}{% if not loop.last %}, {% endif %}{% endfor %});
            {% endif %}
        }
    }
}

#pragma warning restore IDE0051 // Remove unused private members