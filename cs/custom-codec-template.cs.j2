{% macro encode_var_sized(param) -%}
    {% if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Encode{% if is_var_sized_list_contains_nullable(param.type)%}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ item_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Encode{% if param.nullable  %}Nullable{% endif %}(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ key_type(lang_name, param.type) }}Codec.Encode, {{ value_type(lang_name, param.type) }}Codec.Encode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.EncodeNullable(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }}, {{ lang_name(param.type) }}Codec.Encode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Encode(clientMessage, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }})
        {%- endif %}
    {% endif %}
{%- endmacro %}
{% macro decode_var_sized(param) -%}
    {%- if is_var_sized_list(param.type) or is_var_sized_list_contains_nullable(param.type) -%}
        ListMultiFrameCodec.Decode{% if is_var_sized_list_contains_nullable(param.type) %}ContainsNullable{% endif %}{% if param.nullable  %}Nullable{% endif %}(iterator, {{ item_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_entry_list(param.type) -%}
        EntryListCodec.Decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- elif is_var_sized_map(param.type) -%}
        MapCodec.Decode{% if param.nullable  %}Nullable{% endif %}(iterator, {{ key_type(lang_name, param.type) }}Codec.Decode, {{ value_type(lang_name, param.type) }}Codec.Decode)
    {%- else -%}
        {%- if param.nullable  -%}
            CodecUtil.DecodeNullable(iterator, {{ lang_name(param.type) }}Codec.Decode)
        {%- else -%}
            {{ lang_name(param.type) }}Codec.Decode(iterator)
        {%- endif -%}
    {%- endif -%}
{%- endmacro %}
// Copyright (c) 2008-2019, Hazelcast, Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections;
using System.Collections.Generic;
using Hazelcast.Client.Protocol;
using Hazelcast.Client.Protocol.Codec.BuiltIn;
using Hazelcast.Client.Protocol.Util;
using Hazelcast.IO;
using Hazelcast.IO.Serialization;
using static Hazelcast.Client.Protocol.Codec.BuiltIn.FixedSizeTypesCodec;
using static Hazelcast.Client.Protocol.ClientMessage;
using static Hazelcast.IO.Bits;

{% if namespace %}
namespace {{ namespace }}
{% else %}
namespace Hazelcast.Client.Protocol.Codec.Custom
{% endif %}
{
    // This file is auto-generated by the Hazelcast Client Protocol Code Generator.
    // To change this file, edit the templates or the protocol
    // definitions on the https://github.com/hazelcast/hazelcast-client-protocol
    // and regenerate it.

    internal static class {{ codec.name|capital }}Codec
    {
        {% for param in fixed_params(codec.params) %}
        private const int {{ param.name|capital }}FieldOffset = {% if loop.first %}0{% else %}{{ loop.previtem.name|capital}}FieldOffset + {{ lang_types_decode(loop.previtem.type)|capital}}SizeInBytes{% endif %};
        {% if loop.last %}
        private const int InitialFrameSize = {{ param.name|capital}}FieldOffset + {{lang_types_decode(param.type)|capital}}SizeInBytes;
        {% endif %}
        {% endfor %}

        public static void Encode(ClientMessage clientMessage, {{ lang_types_encode(codec.name) }} {{ param_name(codec.name) }})
        {
            clientMessage.Add(BeginFrame);
            {% for param in fixed_params(codec.params) %}
            {% if loop.first %}

            var initialFrame = new Frame(new byte[InitialFrameSize]);
            {% endif %}
            Encode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, {{ param.name|capital}}FieldOffset, {{ param_name(codec.name)}}.{% if param.type == 'boolean' %}Is{% else %}{% endif %}{{ param.name|capital }});
            {% if loop.last %}
            clientMessage.Add(initialFrame);
            {% endif %}
            {% endfor %}
            {% for param in var_size_params(codec.params) %}
            {% if loop.first %}

            {% endif %}
            {{ encode_var_sized(param) }};
            {% endfor %}

            clientMessage.Add(EndFrame);
        }

        public static {{ lang_types_decode(codec.name) }} Decode(FrameIterator iterator)
        {
            // begin frame
            iterator.Next();
            {% for param in fixed_params(codec.params) %}
            {% if loop.first %}

            var initialFrame = iterator.Next();
            {% endif %}
            var {{ param.name }} = Decode{{ lang_types_decode(param.type)|capital }}(initialFrame.Content, {{  param.name|capital }}FieldOffset);
            {% endfor %}
            {% for param in var_size_params(codec.params) %}
            {% if loop.first %}

            {% endif %}
            var {{ param.name }} = {{ decode_var_sized(param) }};
            {% endfor %}

            CodecUtil.FastForwardToEndFrame(iterator);

            {% if codec.returnWithFactory %}
            return CustomTypeFactory.Create{{ codec.name }}({% for param in codec.params %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
            {% else %}
            return new {{ lang_types_decode(codec.name) }}({% for param in codec.params %}{{ param.name }}{% if not loop.last %}, {% endif %}{% endfor %});
            {% endif %}
        }
    }
}